plugins {
	id 'org.springframework.boot' version '2.3.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'groovy'
	id "org.sonarqube" version "2.7.1"
	id 'maven'
}

group = 'com.wkelms.ebilling.digsig.api'
version = '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenLocal()
	mavenCentral()
	maven{
		url "https://nexus.wkelms.com/repository/public"
	}

}

configurations {
	jaxws
}

bootJar {
	mainClassName = 'com.wkelms.ebilling.digsig.api.DigitalSignatureServiceApplication'
	exclude ("*.jks")
	exclude ("*.yml*")
	exclude ("*.xml")
	exclude ("*.exe")
}

task wsimport {
	def profile = project.hasProperty('env') ? env : 'test'
	println "profile $profile"
	def wsdlURL = "https://tseiod-test.trustweaver.com/ts/svs.asmx?wsdl"
	def keyStore = "${projectDir}/src/main/resources/tw_keystore_test.pfx"
	def trustStore = "${projectDir}/src/main/resources/tw_truststore_test.jks"
	if (profile == 'prod'){
		wsdlURL = wsdlURL.replace("tseiod-test","tseiod")
		keyStore = keyStore.replace("_test","_prod")
		trustStore = trustStore.replace("_test","_prod")
	}
	ext.destDir = file("${projectDir}/src/main/java")
	System.setProperty('javax.net.ssl.keyStoreType', 'pkcs12')
	System.setProperty('javax.net.ssl.keyStore', keyStore)
	System.setProperty('javax.net.ssl.keyStorePassword', 'datacert')
	System.setProperty('javax.net.ssl.trustStore', trustStore)
	System.setProperty('javax.net.ssl.trustStorePassword', 'datacert')
	try {
		doLast {
			ant {
				sourceSets.main.output.classesDirs.inits()
				destDir.mkdirs()
				taskdef(name: 'wsimport',
						classname: 'com.sun.tools.ws.ant.WsImport',
						classpath: configurations.jaxws.asPath
				)
				wsimport(keep: true,
						sourcedestdir: 'src/main/java',
						package: "com.wkelms.ebilling.digsig.api.trustweaver",
						wsdl: wsdlURL) {
					xjcarg(value: "-XautoNameResolution")
				}
			}
		}
	}catch(Exception ex) {
		println ex
	}
}

task dist(type: Copy, dependsOn: bootJar) {
	def profile = project.hasProperty('env') ? env : 'test'
	def keyStore = "tw_keystore_test.pfx"
	def trustStore = "tw_truststore_test.jks"
	if (profile == 'prod'){
		keyStore = "tw_keystore_prod.pfx"
		trustStore = "tw_truststore_prod.jks"
	}
	println "Environment -----------> $profile"
	def distDir = file ('build/dist/')
	distDir.mkdir()
	from 'build/libs'
	from 'src/main/resources'
	into 'build/dist'
	include "nssm.exe"
	include "start_service.bat"
	include "application.yml.rename"
	include "keystore.jks"
	include "$keyStore"
	include "$trustStore"
	include "logback.xml"
	include "${project.name}-${project.version}.jar"
	rename("${project.name}-${project.version}.jar","DigSigService-${project.version}.jar")
	rename("application.yml.rename","application.yml")
}


uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "https://nexus.wkelms.com/repository/cp-releases/") {
				authentication(userName: "deployment", password: "datacert")
			}
			snapshotRepository(url: "https://nexus.wkelms.com/repository/cp-snapshots/") {
				authentication(userName: "deployment", password: "datacert")
			}
			println "Uploading DigSigService-$version to Nexus Repo"
			pom.version = "$version"
			pom.artifactId = "DigSigService"
			pom.groupId = "com.wkelms.ebilling.digsig"
		}
	}
}

dependencies {
	jaxws 'com.sun.xml.ws:jaxws-tools:2.1.4'

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.codehaus.groovy:groovy'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	compile group: 'com.sun.xml.ws', name: 'jaxws-tools', version: '2.1.4'
	compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.10'
	compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.11'
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.11'
	compile group: 'commons-io', name: 'commons-io', version: '2.7'
	compile group: 'com.microsoft.sqlserver', name: 'sqljdbc4', version: '4.0'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

sonarqube {
	properties {
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.sources", "src"
		property "sonar.exclusions", "src/test/groovy/**"
	}
}

compileJava {
	dependsOn wsimport
	source wsimport.destDir
}
test {
	useJUnitPlatform()
}
